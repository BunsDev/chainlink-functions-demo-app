/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  GitHubFunctions,
  GitHubFunctionsInterface,
} from "../../contracts/GitHubFunctions";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "oracle",
        type: "address",
      },
      {
        internalType: "string",
        name: "_calculationLogic",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "EmptyArgs",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptySource",
    type: "error",
  },
  {
    inputs: [],
    name: "RequestIsAlreadyPending",
    type: "error",
  },
  {
    inputs: [],
    name: "RequestIsNotPending",
    type: "error",
  },
  {
    inputs: [],
    name: "SenderIsNotRegistry",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "requestId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "result",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "err",
        type: "bytes",
      },
    ],
    name: "OCRResponse",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
    ],
    name: "RequestFulfilled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
    ],
    name: "RequestSent",
    type: "event",
  },
  {
    inputs: [],
    name: "calculationLogic",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "enum Functions.Location",
            name: "codeLocation",
            type: "uint8",
          },
          {
            internalType: "enum Functions.Location",
            name: "secretsLocation",
            type: "uint8",
          },
          {
            internalType: "enum Functions.CodeLanguage",
            name: "language",
            type: "uint8",
          },
          {
            internalType: "string",
            name: "source",
            type: "string",
          },
          {
            internalType: "bytes",
            name: "secrets",
            type: "bytes",
          },
          {
            internalType: "string[]",
            name: "args",
            type: "string[]",
          },
        ],
        internalType: "struct Functions.Request",
        name: "req",
        type: "tuple",
      },
      {
        internalType: "uint64",
        name: "subscriptionId",
        type: "uint64",
      },
      {
        internalType: "uint32",
        name: "gasLimit",
        type: "uint32",
      },
      {
        internalType: "uint256",
        name: "gasPrice",
        type: "uint256",
      },
    ],
    name: "estimateCost",
    outputs: [
      {
        internalType: "uint96",
        name: "",
        type: "uint96",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDONPublicKey",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "requestId",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "response",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "err",
        type: "bytes",
      },
    ],
    name: "handleOracleFulfillment",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "latestError",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRequestId",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestResponse",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string[]",
        name: "args",
        type: "string[]",
      },
      {
        internalType: "uint64",
        name: "subscriptionId",
        type: "uint64",
      },
      {
        internalType: "uint32",
        name: "gasLimit",
        type: "uint32",
      },
    ],
    name: "multiplyMetricWithEther",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001a5438038062001a5483398101604081905262000034916200007c565b600080546001600160a01b0319166001600160a01b03841617905560026200005d828262000201565b505050620002cd565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156200009057600080fd5b82516001600160a01b0381168114620000a857600080fd5b602084810151919350906001600160401b0380821115620000c857600080fd5b818601915086601f830112620000dd57600080fd5b815181811115620000f257620000f262000066565b604051601f8201601f19908116603f011681019083821181831017156200011d576200011d62000066565b8160405282815289868487010111156200013657600080fd5b600093505b828410156200015a57848401860151818501870152928501926200013b565b60008684830101528096505050505050509250929050565b600181811c908216806200018757607f821691505b602082108103620001a857634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001fc57600081815260208120601f850160051c81016020861015620001d75750805b601f850160051c820191505b81811015620001f857828155600101620001e3565b5050505b505050565b81516001600160401b038111156200021d576200021d62000066565b62000235816200022e845462000172565b84620001ae565b602080601f8311600181146200026d5760008415620002545750858301515b600019600386901b1c1916600185901b178555620001f8565b600085815260208120601f198616915b828110156200029e578886015182559484019460019091019084016200027d565b5085821015620002bd5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61177780620002dd6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063bef3a2f01161005b578063bef3a2f0146100e6578063d328a91e146100ee578063d4b39175146100f6578063fffeb84e1461012657600080fd5b8063092b8b3c1461008d5780630ca76175146100b35780631aa46f59146100c8578063af616918146100d1575b600080fd5b6100a061009b366004610ea8565b61012e565b6040519081526020015b60405180910390f35b6100c66100c136600461102b565b61023d565b005b6100a060035481565b6100d96102f0565b6040516100aa91906110e8565b6100d961037e565b6100d961038b565b6101096101043660046111be565b61041a565b6040516bffffffffffffffffffffffff90911681526020016100aa565b6100d96104a1565b600061016a6040805160c08101909152806000815260200160008152602001600081526020016060815260200160608152602001606081525090565b61020c6000806002805461017d906112d0565b80601f01602080910402602001604051908101604052809291908181526020018280546101a9906112d0565b80156101f65780601f106101cb576101008083540402835291602001916101f6565b820191906000526020600020905b8154815290600101906020018083116101d957829003601f168201915b5050505050846104ae909392919063ffffffff16565b6102206102198688611304565b8290610545565b600061022d828686610588565b6003819055979650505050505050565b60008381526001602052604090205483906001600160a01b0316331461028f576040517fa0c5ec6300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081815260016020526040808220805473ffffffffffffffffffffffffffffffffffffffff191690555182917f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e691a26102ea8484846106e9565b50505050565b600280546102fd906112d0565b80601f0160208091040260200160405190810160405280929190818152602001828054610329906112d0565b80156103765780601f1061034b57610100808354040283529160200191610376565b820191906000526020600020905b81548152906001019060200180831161035957829003601f168201915b505050505081565b600480546102fd906112d0565b60008054604080517fd328a91e00000000000000000000000000000000000000000000000000000000815290516060936001600160a01b039093169263d328a91e92600480820193918290030181865afa1580156103ed573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104159190810190611311565b905090565b600080546001600160a01b031663d227d2458561043688610742565b86866040518563ffffffff1660e01b8152600401610457949392919061137f565b602060405180830381865afa158015610474573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049891906113bb565b95945050505050565b600580546102fd906112d0565b80516000036104e9576040517f22ce3edd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b838360018111156104fc576104fc6113e9565b9081600181111561050f5761050f6113e9565b90525060408401828015610525576105256113e9565b90818015610535576105356113e9565b9052506060909301929092525050565b8051600003610580576040517ffe936cb700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60a090910152565b6000805481906001600160a01b03166328242b04856105a688610742565b866040518463ffffffff1660e01b81526004016105c5939291906113ff565b6020604051808303816000875af11580156105e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106089190611438565b905060008054906101000a90046001600160a01b03166001600160a01b0316635ab1bd536040518163ffffffff1660e01b8152600401602060405180830381865afa15801561065b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067f9190611451565b600082815260016020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039490941693909317909255905182917f1131472297a800fee664d1d89cfa8f7676ff07189ecc53f80bbb5f4969099db891a2949350505050565b60046106f583826114c8565b50600561070282826114c8565b50827f7bab0ec163b5c132c72b8146ac4d6e067e82ed58f8b131150aa71c92589115628383604051610735929190611588565b60405180910390a2505050565b6060610761604051806040016040528060608152602001600081525090565b61076d816101006109d8565b5060408051808201909152600c81527f636f64654c6f636174696f6e000000000000000000000000000000000000000060208201526107ad908290610a43565b82516107cb9060018111156107c4576107c46113e9565b8290610a5f565b60408051808201909152600881527f6c616e6775616765000000000000000000000000000000000000000000000000602082015261080a908290610a43565b60408301516108219080156107c4576107c46113e9565b60408051808201909152600681527f736f7572636500000000000000000000000000000000000000000000000000006020820152610860908290610a43565b6060830151610870908290610a43565b60a0830151511561091f5760408051808201909152600481527f617267730000000000000000000000000000000000000000000000000000000060208201526108ba908290610a43565b6108c381610a89565b60005b8360a0015151811015610915576109038460a0015182815181106108ec576108ec6115ad565b602002602001015183610a4390919063ffffffff16565b8061090d816115d9565b9150506108c6565b5061091f81610a97565b608083015151156109d15760408051808201909152600f81527f736563726574734c6f636174696f6e00000000000000000000000000000000006020820152610969908290610a43565b610982836020015160018111156107c4576107c46113e9565b60408051808201909152600781527f736563726574730000000000000000000000000000000000000000000000000060208201526109c1908290610a43565b60808301516109d1908290610aa2565b5192915050565b6040805180820190915260608152600060208201526109f86020836115f2565b15610a2057610a086020836115f2565b610a13906020611614565b610a1d9083611627565b91505b506020808301829052604080518085526000815283019091019052815b92915050565b610a508260038351610aab565b610a5a8282610bba565b505050565b67ffffffffffffffff811115610a7d57610a798282610be8565b5050565b610a7982600083610aab565b610a94816004610c1f565b50565b610a94816007610c1f565b610a5082600283515b60178167ffffffffffffffff1611610ad0576102ea8360e0600585901b168317610c30565b60ff8167ffffffffffffffff1611610b0e57610af7836018611fe0600586901b1617610c30565b506102ea8367ffffffffffffffff83166001610c55565b61ffff8167ffffffffffffffff1611610b4d57610b36836019611fe0600586901b1617610c30565b506102ea8367ffffffffffffffff83166002610c55565b63ffffffff8167ffffffffffffffff1611610b8e57610b7783601a611fe0600586901b1617610c30565b506102ea8367ffffffffffffffff83166004610c55565b610ba383601b611fe0600586901b1617610c30565b506102ea8367ffffffffffffffff83166008610c55565b604080518082019091526060815260006020820152610be183846000015151848551610c83565b9392505050565b610bf38260c2610c30565b50610a798282604051602001610c0b91815260200190565b604051602081830303815290604052610aa2565b610a5a82601f611fe0600585901b16175b604080518082019091526060815260006020820152610be18384600001515184610d6d565b604080518082019091526060815260006020820152610c7b848560000151518585610dc8565b949350505050565b6040805180820190915260608152600060208201528251821115610ca657600080fd5b6020850151610cb58386611627565b1115610ce857610ce885610cd887602001518786610cd39190611627565b610e49565b610ce390600261163a565b610e60565b600080865180518760208301019350808887011115610d075787860182525b505050602084015b60208410610d475780518252610d26602083611627565b9150610d33602082611627565b9050610d40602085611614565b9350610d0f565b51815160001960208690036101000a019081169019919091161790525083949350505050565b60408051808201909152606081526000602082015283602001518310610da257610da28485602001516002610ce3919061163a565b8351805160208583010184815350808503610dbe576001810182525b5093949350505050565b6040805180820190915260608152600060208201526020850151610dec8584611627565b1115610e0057610e0085610cd88685611627565b60006001610e1084610100611735565b610e1a9190611614565b9050855183868201018583198251161781525080518487011115610e3e5783860181525b509495945050505050565b600081831115610e5a575081610a3d565b50919050565b8151610e6c83836109d8565b506102ea8382610bba565b803567ffffffffffffffff81168114610e8f57600080fd5b919050565b803563ffffffff81168114610e8f57600080fd5b60008060008060608587031215610ebe57600080fd5b843567ffffffffffffffff80821115610ed657600080fd5b818701915087601f830112610eea57600080fd5b813581811115610ef957600080fd5b8860208260051b8501011115610f0e57600080fd5b602092830196509450610f249187019050610e77565b9150610f3260408601610e94565b905092959194509250565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff81118282101715610f7657610f76610f3d565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610fa557610fa5610f3d565b604052919050565b600067ffffffffffffffff821115610fc757610fc7610f3d565b50601f01601f191660200190565b600082601f830112610fe657600080fd5b8135610ff9610ff482610fad565b610f7c565b81815284602083860101111561100e57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060006060848603121561104057600080fd5b83359250602084013567ffffffffffffffff8082111561105f57600080fd5b61106b87838801610fd5565b9350604086013591508082111561108157600080fd5b5061108e86828701610fd5565b9150509250925092565b60005b838110156110b357818101518382015260200161109b565b50506000910152565b600081518084526110d4816020860160208601611098565b601f01601f19169290920160200192915050565b602081526000610be160208301846110bc565b803560028110610e8f57600080fd5b803560018110610e8f57600080fd5b600067ffffffffffffffff8084111561113457611134610f3d565b8360051b6020611145818301610f7c565b8681529350908401908084018783111561115e57600080fd5b855b83811015611192578035858111156111785760008081fd5b6111848a828a01610fd5565b835250908201908201611160565b50505050509392505050565b600082601f8301126111af57600080fd5b610be183833560208501611119565b600080600080608085870312156111d457600080fd5b843567ffffffffffffffff808211156111ec57600080fd5b9086019060c0828903121561120057600080fd5b611208610f53565b611211836110fb565b815261121f602084016110fb565b60208201526112306040840161110a565b604082015260608301358281111561124757600080fd5b6112538a828601610fd5565b60608301525060808301358281111561126b57600080fd5b6112778a828601610fd5565b60808301525060a08301358281111561128f57600080fd5b61129b8a82860161119e565b60a08301525095506112b291505060208601610e77565b92506112c060408601610e94565b9396929550929360600135925050565b600181811c908216806112e457607f821691505b602082108103610e5a57634e487b7160e01b600052602260045260246000fd5b6000610be1368484611119565b60006020828403121561132357600080fd5b815167ffffffffffffffff81111561133a57600080fd5b8201601f8101841361134b57600080fd5b8051611359610ff482610fad565b81815285602083850101111561136e57600080fd5b610498826020830160208601611098565b67ffffffffffffffff851681526080602082015260006113a260808301866110bc565b63ffffffff949094166040830152506060015292915050565b6000602082840312156113cd57600080fd5b81516bffffffffffffffffffffffff81168114610be157600080fd5b634e487b7160e01b600052602160045260246000fd5b67ffffffffffffffff8416815260606020820152600061142260608301856110bc565b905063ffffffff83166040830152949350505050565b60006020828403121561144a57600080fd5b5051919050565b60006020828403121561146357600080fd5b81516001600160a01b0381168114610be157600080fd5b601f821115610a5a57600081815260208120601f850160051c810160208610156114a15750805b601f850160051c820191505b818110156114c0578281556001016114ad565b505050505050565b815167ffffffffffffffff8111156114e2576114e2610f3d565b6114f6816114f084546112d0565b8461147a565b602080601f83116001811461152b57600084156115135750858301515b600019600386901b1c1916600185901b1785556114c0565b600085815260208120601f198616915b8281101561155a5788860151825594840194600190910190840161153b565b50858210156115785787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60408152600061159b60408301856110bc565b828103602084015261049881856110bc565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016115eb576115eb6115c3565b5060010190565b60008261160f57634e487b7160e01b600052601260045260246000fd5b500690565b81810381811115610a3d57610a3d6115c3565b80820180821115610a3d57610a3d6115c3565b8082028115828204841417610a3d57610a3d6115c3565b600181815b8085111561168c578160001904821115611672576116726115c3565b8085161561167f57918102915b93841c9390800290611656565b509250929050565b6000826116a357506001610a3d565b816116b057506000610a3d565b81600181146116c657600281146116d0576116ec565b6001915050610a3d565b60ff8411156116e1576116e16115c3565b50506001821b610a3d565b5060208310610133831016604e8410600b841016171561170f575081810a610a3d565b6117198383611651565b806000190482111561172d5761172d6115c3565b029392505050565b6000610be1838361169456fea26469706673582212207c6982d042e788a8225a0bb49b19c14c8b02bfa189cf1328b7eada8996aded1f64736f6c63430008130033";

type GitHubFunctionsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GitHubFunctionsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GitHubFunctions__factory extends ContractFactory {
  constructor(...args: GitHubFunctionsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    oracle: PromiseOrValue<string>,
    _calculationLogic: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<GitHubFunctions> {
    return super.deploy(
      oracle,
      _calculationLogic,
      overrides || {}
    ) as Promise<GitHubFunctions>;
  }
  override getDeployTransaction(
    oracle: PromiseOrValue<string>,
    _calculationLogic: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      oracle,
      _calculationLogic,
      overrides || {}
    );
  }
  override attach(address: string): GitHubFunctions {
    return super.attach(address) as GitHubFunctions;
  }
  override connect(signer: Signer): GitHubFunctions__factory {
    return super.connect(signer) as GitHubFunctions__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GitHubFunctionsInterface {
    return new utils.Interface(_abi) as GitHubFunctionsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GitHubFunctions {
    return new Contract(address, _abi, signerOrProvider) as GitHubFunctions;
  }
}
