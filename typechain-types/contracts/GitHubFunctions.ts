/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace Functions {
  export type RequestStruct = {
    codeLocation: PromiseOrValue<BigNumberish>;
    secretsLocation: PromiseOrValue<BigNumberish>;
    language: PromiseOrValue<BigNumberish>;
    source: PromiseOrValue<string>;
    secrets: PromiseOrValue<BytesLike>;
    args: PromiseOrValue<string>[];
  };

  export type RequestStructOutput = [
    number,
    number,
    number,
    string,
    string,
    string[]
  ] & {
    codeLocation: number;
    secretsLocation: number;
    language: number;
    source: string;
    secrets: string;
    args: string[];
  };
}

export interface GitHubFunctionsInterface extends utils.Interface {
  functions: {
    "calculationLogic()": FunctionFragment;
    "estimateCost((uint8,uint8,uint8,string,bytes,string[]),uint64,uint32,uint256)": FunctionFragment;
    "getDONPublicKey()": FunctionFragment;
    "handleOracleFulfillment(bytes32,bytes,bytes)": FunctionFragment;
    "latestError()": FunctionFragment;
    "latestRequestId()": FunctionFragment;
    "latestResponse()": FunctionFragment;
    "multiplyMetricWithEther(string[],uint64,uint32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "calculationLogic"
      | "estimateCost"
      | "getDONPublicKey"
      | "handleOracleFulfillment"
      | "latestError"
      | "latestRequestId"
      | "latestResponse"
      | "multiplyMetricWithEther"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "calculationLogic",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "estimateCost",
    values: [
      Functions.RequestStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getDONPublicKey",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "handleOracleFulfillment",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "latestError",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestRequestId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestResponse",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multiplyMetricWithEther",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculationLogic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDONPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleOracleFulfillment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiplyMetricWithEther",
    data: BytesLike
  ): Result;

  events: {
    "OCRResponse(bytes32,bytes,bytes)": EventFragment;
    "RequestFulfilled(bytes32)": EventFragment;
    "RequestSent(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OCRResponse"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestFulfilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestSent"): EventFragment;
}

export interface OCRResponseEventObject {
  requestId: string;
  result: string;
  err: string;
}
export type OCRResponseEvent = TypedEvent<
  [string, string, string],
  OCRResponseEventObject
>;

export type OCRResponseEventFilter = TypedEventFilter<OCRResponseEvent>;

export interface RequestFulfilledEventObject {
  id: string;
}
export type RequestFulfilledEvent = TypedEvent<
  [string],
  RequestFulfilledEventObject
>;

export type RequestFulfilledEventFilter =
  TypedEventFilter<RequestFulfilledEvent>;

export interface RequestSentEventObject {
  id: string;
}
export type RequestSentEvent = TypedEvent<[string], RequestSentEventObject>;

export type RequestSentEventFilter = TypedEventFilter<RequestSentEvent>;

export interface GitHubFunctions extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GitHubFunctionsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calculationLogic(overrides?: CallOverrides): Promise<[string]>;

    estimateCost(
      req: Functions.RequestStruct,
      subscriptionId: PromiseOrValue<BigNumberish>,
      gasLimit: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDONPublicKey(overrides?: CallOverrides): Promise<[string]>;

    handleOracleFulfillment(
      requestId: PromiseOrValue<BytesLike>,
      response: PromiseOrValue<BytesLike>,
      err: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    latestError(overrides?: CallOverrides): Promise<[string]>;

    latestRequestId(overrides?: CallOverrides): Promise<[string]>;

    latestResponse(overrides?: CallOverrides): Promise<[string]>;

    multiplyMetricWithEther(
      args: PromiseOrValue<string>[],
      subscriptionId: PromiseOrValue<BigNumberish>,
      gasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  calculationLogic(overrides?: CallOverrides): Promise<string>;

  estimateCost(
    req: Functions.RequestStruct,
    subscriptionId: PromiseOrValue<BigNumberish>,
    gasLimit: PromiseOrValue<BigNumberish>,
    gasPrice: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDONPublicKey(overrides?: CallOverrides): Promise<string>;

  handleOracleFulfillment(
    requestId: PromiseOrValue<BytesLike>,
    response: PromiseOrValue<BytesLike>,
    err: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  latestError(overrides?: CallOverrides): Promise<string>;

  latestRequestId(overrides?: CallOverrides): Promise<string>;

  latestResponse(overrides?: CallOverrides): Promise<string>;

  multiplyMetricWithEther(
    args: PromiseOrValue<string>[],
    subscriptionId: PromiseOrValue<BigNumberish>,
    gasLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    calculationLogic(overrides?: CallOverrides): Promise<string>;

    estimateCost(
      req: Functions.RequestStruct,
      subscriptionId: PromiseOrValue<BigNumberish>,
      gasLimit: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDONPublicKey(overrides?: CallOverrides): Promise<string>;

    handleOracleFulfillment(
      requestId: PromiseOrValue<BytesLike>,
      response: PromiseOrValue<BytesLike>,
      err: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    latestError(overrides?: CallOverrides): Promise<string>;

    latestRequestId(overrides?: CallOverrides): Promise<string>;

    latestResponse(overrides?: CallOverrides): Promise<string>;

    multiplyMetricWithEther(
      args: PromiseOrValue<string>[],
      subscriptionId: PromiseOrValue<BigNumberish>,
      gasLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "OCRResponse(bytes32,bytes,bytes)"(
      requestId?: PromiseOrValue<BytesLike> | null,
      result?: null,
      err?: null
    ): OCRResponseEventFilter;
    OCRResponse(
      requestId?: PromiseOrValue<BytesLike> | null,
      result?: null,
      err?: null
    ): OCRResponseEventFilter;

    "RequestFulfilled(bytes32)"(
      id?: PromiseOrValue<BytesLike> | null
    ): RequestFulfilledEventFilter;
    RequestFulfilled(
      id?: PromiseOrValue<BytesLike> | null
    ): RequestFulfilledEventFilter;

    "RequestSent(bytes32)"(
      id?: PromiseOrValue<BytesLike> | null
    ): RequestSentEventFilter;
    RequestSent(id?: PromiseOrValue<BytesLike> | null): RequestSentEventFilter;
  };

  estimateGas: {
    calculationLogic(overrides?: CallOverrides): Promise<BigNumber>;

    estimateCost(
      req: Functions.RequestStruct,
      subscriptionId: PromiseOrValue<BigNumberish>,
      gasLimit: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDONPublicKey(overrides?: CallOverrides): Promise<BigNumber>;

    handleOracleFulfillment(
      requestId: PromiseOrValue<BytesLike>,
      response: PromiseOrValue<BytesLike>,
      err: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    latestError(overrides?: CallOverrides): Promise<BigNumber>;

    latestRequestId(overrides?: CallOverrides): Promise<BigNumber>;

    latestResponse(overrides?: CallOverrides): Promise<BigNumber>;

    multiplyMetricWithEther(
      args: PromiseOrValue<string>[],
      subscriptionId: PromiseOrValue<BigNumberish>,
      gasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculationLogic(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    estimateCost(
      req: Functions.RequestStruct,
      subscriptionId: PromiseOrValue<BigNumberish>,
      gasLimit: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDONPublicKey(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    handleOracleFulfillment(
      requestId: PromiseOrValue<BytesLike>,
      response: PromiseOrValue<BytesLike>,
      err: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    latestError(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestRequestId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestResponse(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multiplyMetricWithEther(
      args: PromiseOrValue<string>[],
      subscriptionId: PromiseOrValue<BigNumberish>,
      gasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
